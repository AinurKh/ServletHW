package dao;

import model.PersonBuilder;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

@Testcontainers
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class PersonDAOTest {
    @Container
    private static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>("postgres:latest")
            .withDatabaseName("test")
            .withUsername("test")
            .withPassword("test");

    private Connection connection;
    private PersonDao personDao;

    @BeforeAll
    public void beforeAll() {
        postgreSQLContainer.start();
    }

    @BeforeEach
    public void setUp() throws SQLException, IOException {
        String jdbcUrl = postgreSQLContainer.getJdbcUrl();
        String username = postgreSQLContainer.getUsername();
        String password = postgreSQLContainer.getPassword();

        try {
            connection=DriverManager.getConnection(jdbcUrl, username, password);
            Statement statement = connection.createStatement();

            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person (id int primary key not null generated by default as identity, name varchar(100) not null, age int check (age > 9 and age <90));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS car (id int primary key generated by default as identity not null, person_id int not null references person(id),model varchar(100) not null, horse_power int not null check (horse_power >60 and horse_power <800));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS gas_station (id int primary key not null generated by default as identity, name varchar(100) not null, number int not null);");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person_gas_station (person_id INTEGER NOT NULL REFERENCES person(id), gas_station_id INTEGER NOT NULL REFERENCES gas_station(id), PRIMARY KEY (person_id, gas_station_id));");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        personDao = new PersonDao(connection);
    }

    @AfterEach
    public void tearDown() throws SQLException {
        connection.close();
    }

    @AfterAll
    static void tearDownContainer() throws SQLException {
        postgreSQLContainer.stop();
    }

    @Test
     void testAddPersonAndGetPersonById() throws SQLException, IOException {
        PersonBuilder person=new PersonBuilder.Builder()
                .setAge(22)
                .setName("OJEAN")
                .build();

        int id = personDao.addPerson(person);
        PersonBuilder personFromDB=personDao.getPersonById(id);

        assertNotNull(personFromDB,"Should not be null");
        assertEquals(person.getName(),personFromDB.getName(),"Name should match");
        assertEquals(person.getAge(),personFromDB.getAge(),"Age should match");
    }

   @Test
    void testGetPeople() throws SQLException, IOException {
        PersonBuilder person1 = new PersonBuilder.Builder()
                .setName("OJEAN")
                .setAge(11)
                .build();

        PersonBuilder person2 = new PersonBuilder.Builder()
                .setName("SAM")
                .setAge(12)
                .build();

        personDao.addPerson(person1);
        personDao.addPerson(person2);

        List<PersonBuilder>people = personDao.getPeople();

        assertNotNull(people,"Should not be null");
        assertTrue(people.stream().anyMatch(p-> p.getName().equals(person1.getName()) && p.getAge()==person1.getAge()), "Person1 must match");
        assertTrue(people.stream().anyMatch(p-> p.getName().equals(person2.getName()) && p.getAge()==person2.getAge()), "Person2 must match");

    }

    @Test
    void testDeletePerson() throws SQLException, IOException {
        PersonBuilder person = new PersonBuilder.Builder()
                .setName("SAM")
                .setAge(12)
                .build();

        int id = personDao.addPerson(person);
        personDao.deletePerson(id);

        PersonBuilder deletedPersonFromDB = personDao.getPersonById(id);
        assertNull(deletedPersonFromDB,"Should be null");

    }
    @Test
    void testUpdatePerson() throws SQLException, IOException {
        PersonBuilder person = new PersonBuilder.Builder()
                .setName("SAM")
                .setAge(12)
                .build();

        int id = personDao.addPerson(person);
        PersonBuilder updatedPerson = new PersonBuilder.Builder()
                .setName("Dean")
                .setAge(17)
                .build();

        personDao.updatePerson(updatedPerson,id);
        PersonBuilder personFromDB = personDao.getPersonById(id);

        assertNotEquals(person.getName(),personFromDB.getName(),"Name should different");
        assertNotEquals(person.getAge(),personFromDB.getAge(),"Age should different");
    }
}
