package dao;

import entity.CarBuilder;
import entity.PersonBuilder;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@Testcontainers
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class CarDaoTest {
    @Container
    private static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>("postgres:latest")
                    .withDatabaseName("test")
                    .withUsername("test")
                    .withPassword("test");

    private Connection connection;
    private CarDao carDao;
    private PersonDao personDao;

    @BeforeAll
    public void beforeAll() {
        postgreSQLContainer.start();
    }

    @BeforeEach
    public void setUp() throws SQLException, IOException {
        String jdbcUrl = postgreSQLContainer.getJdbcUrl();
        String username = postgreSQLContainer.getUsername();
        String password = postgreSQLContainer.getPassword();

        try {
            connection= DriverManager.getConnection(jdbcUrl, username, password);
            Statement statement = connection.createStatement();

            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person (id integer primary key not null generated by default as identity, name varchar(100) not null, age integer check (age > 9 and age <90));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS car (car_id integer primary key generated by default as identity not null, person_id int not null references person(id),model varchar(100) not null, horse_power int not null check (horse_power >60 and horse_power <800));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS gas_station (id integer primary key not null generated by default as identity, name varchar(100) not null, number integer not null);");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person_gas_station (person_id INTEGER NOT NULL REFERENCES person(id), gas_station_id INTEGER NOT NULL REFERENCES gas_station(id), PRIMARY KEY (person_id, gas_station_id));");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        carDao = new CarDao(connection);
        personDao = new PersonDao(connection);

    }

    @AfterEach
    public void tearDown() throws SQLException {
        connection.close();
    }

    @AfterAll
    static void tearDownContainer() throws SQLException {

        postgreSQLContainer.stop();
    }

    @Test
    @Order(1)
    void testAddCarAndGetCarById() throws SQLException, IOException {
        PersonBuilder personBuilder = new PersonBuilder.Builder()
                .setName("AINUR")
                .setAge(22)
                .build();

        personDao.addPerson(personBuilder);

        CarBuilder car1 = new CarBuilder.Builder()
                .setPersonId(1)
                .setModel("AUDI")
                .setHorsePower(250)
                .build();

        int id = carDao.addCar(car1);
        CarBuilder carFromDB=carDao.getCarById(id);

        assertNotNull(carFromDB,"Should not be null");
        assertEquals(car1.getModel(),carFromDB.getModel(),"Model should match");
        assertEquals(car1.getHorsePower(),carFromDB.getHorsePower(),"HorsePower should match");
        assertEquals(car1.getPersonId(),carFromDB.getPersonId(),"PersonId should match");
    }

    @Test
    @Order(3)
    void testGetCars() throws SQLException, IOException {
        List<CarBuilder> carBuilderList = carDao.getCars();
        PersonBuilder personBuilder1 = new PersonBuilder.Builder()
                .setName("AINUR")
                .setAge(22)
                .build();

        PersonBuilder personBuilder2 = new PersonBuilder.Builder()
                .setName("AINUR")
                .setAge(22)
                .build();

        personDao.addPerson(personBuilder1);
        personDao.addPerson(personBuilder2);

        CarBuilder car1 = new CarBuilder.Builder()
                .setPersonId(1)
                .setModel("BMW")
                .setHorsePower(250)
                .build();

        CarBuilder car2 = new CarBuilder.Builder()
                .setPersonId(2)
                .setModel("LADA")
                .setHorsePower(106)
                .build();

        int idFirstCar = carDao.addCar(car1);
        int idSecondCar = carDao.addCar(car2);

        carBuilderList= carDao.getCars();

        assertNotNull(carBuilderList,"Should not be null");
        assertTrue(carBuilderList.stream().anyMatch(p-> p.getModel().equals(car1.getModel()) && p.getHorsePower()==car1.getHorsePower()), "Car1 must match");
        assertTrue(carBuilderList.stream().anyMatch(p-> p.getModel().equals(car2.getModel()) && p.getHorsePower()==car2.getHorsePower()), "Car1 must match");
    }

    @Test
    @Order(2)
    void testDeleteCar() throws SQLException, IOException {
        List<CarBuilder> carBuilderList = carDao.getCars();
        PersonBuilder personBuilder2 = new PersonBuilder.Builder()
                .setName("AINUR")
                .setAge(22)
                .build();

        personDao.addPerson(personBuilder2);

        CarBuilder car = new CarBuilder.Builder()
                .setPersonId(1)
                .setHorsePower(200)
                .setModel("Jaguar")
                .build();

        int id = carDao.addCar(car);
        carDao.deleteCar(id);

        CarBuilder deletedCarFromDB = carDao.getCarById(id);
        assertNull(deletedCarFromDB,"Should be null");
    }
    @Test
    @Order(4)
    void testUpdateCar() throws SQLException, IOException {
        PersonBuilder personBuilder2 = new PersonBuilder.Builder()
                .setName("AINUR")
                .setAge(22)
                .build();

        personDao.addPerson(personBuilder2);

        CarBuilder car = new CarBuilder.Builder()
                .setPersonId(1)
                .setModel("BMW")
                .setHorsePower(180)
                .build();

        int id =carDao.addCar(car);

        CarBuilder updatedCar = new CarBuilder.Builder()
                .setPersonId(1)
                .setModel("ROLLS")
                .setHorsePower(400)
                .build();

        carDao.updateCar(updatedCar,id);
        CarBuilder carFromDB = carDao.getCarById(id);

        assertNotEquals(car.getModel(),carFromDB.getModel(),"Model should different");
        assertNotEquals(car.getHorsePower(),carFromDB.getHorsePower(),"HorsePower should different");
    }
}
