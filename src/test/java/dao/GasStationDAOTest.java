package dao;

import model.GasStationBuilder;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestMethodOrder;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@Testcontainers
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class GasStationDAOTest {
    @Container
    private static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>("postgres:latest")
                    .withDatabaseName("test")
                    .withUsername("test")
                    .withPassword("test");

    private Connection connection;
    private GasStationDAO gasStationDAO;

    @BeforeAll
    public void beforeAll() {
        postgreSQLContainer.start();
    }

    @BeforeEach
    public void setUp() throws SQLException, IOException {
        String jdbcUrl = postgreSQLContainer.getJdbcUrl();
        String username = postgreSQLContainer.getUsername();
        String password = postgreSQLContainer.getPassword();

        try {
            connection= DriverManager.getConnection(jdbcUrl, username, password);
            Statement statement = connection.createStatement();

            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person (id int primary key not null generated by default as identity, name varchar(100) not null, age int check (age > 9 and age <90));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS car (id int primary key generated by default as identity not null, person_id int not null references person(id),model varchar(100) not null, horse_power int not null check (horse_power >60 and horse_power <800));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS gas_station (id int primary key not null generated by default as identity, name varchar(100) not null, number int not null);");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person_gas_station (person_id INTEGER NOT NULL REFERENCES person(id), gas_station_id INTEGER NOT NULL REFERENCES gas_station(id), PRIMARY KEY (person_id, gas_station_id));");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        gasStationDAO = new GasStationDAO(connection);
    }

    @AfterEach
    public void tearDown() throws SQLException {
        connection.close();
    }

    @AfterAll
    static void tearDownContainer() throws SQLException {
        postgreSQLContainer.stop();
    }

    @Test
    @Order(1)
    void testAddGasStationAndGetById() throws SQLException, IOException {

        GasStationBuilder gasStation = new GasStationBuilder.Builder()
                .setNumber(1)
                .setName("TATNEFT")
                .build();

        int id = gasStationDAO.addStation(gasStation);
        GasStationBuilder gasStationFromDB=gasStationDAO.getStationById(id);

        assertNotNull(gasStationFromDB,"Should not be null");
        assertEquals(gasStation.getName(),gasStationFromDB.getName(),"Name should match");
        assertEquals(gasStation.getNumber(),gasStationFromDB.getNumber(),"Number of Station should match");
    }

    @Test
    @Order(3)
    void testGetGasStations() throws SQLException, IOException {
        GasStationBuilder gasStation1 = new GasStationBuilder.Builder()
                .setNumber(1)
                .setName("TATNEFT")
                .build();

        GasStationBuilder gasStation2 = new GasStationBuilder.Builder()
                .setNumber(1)
                .setName("TAIF")
                .build();

        int idFirstCar = gasStationDAO.addStation(gasStation1);
        int idSecondCar = gasStationDAO.addStation(gasStation2);

        List<GasStationBuilder> gasStationList= gasStationDAO.getAllStations();

        assertNotNull(gasStationList,"Should not be null");
        assertTrue(gasStationList.stream().anyMatch(p-> p.getName().equals(gasStation1.getName()) && p.getNumber()==gasStation1.getNumber()), "GasStation1 must match");
        assertTrue(gasStationList.stream().anyMatch(p-> p.getName().equals(gasStation2.getName()) && p.getNumber()==gasStation2.getNumber()), "GasStation1 must match");
    }

    @Test
    @Order(2)
    void testDeleteGasStation() throws SQLException, IOException {
        GasStationBuilder gasStation1 = new GasStationBuilder.Builder()
                .setNumber(1)
                .setName("TATNEFT")
                .build();

        int id = gasStationDAO.addStation(gasStation1);
        gasStationDAO.deleteStation(id);

        GasStationBuilder deletedGasStationFromDB = gasStationDAO.getStationById(id);
        assertNull(deletedGasStationFromDB,"Should be null");
    }
    @Test
    @Order(4)
    void testUpdateGasStation() throws SQLException, IOException {
        GasStationBuilder gasStation = new GasStationBuilder.Builder()
                .setNumber(1)
                .setName("TATNEFT")
                .build();

        int id = gasStationDAO.addStation(gasStation);

        GasStationBuilder updatedGasStation = new GasStationBuilder.Builder()
                .setName("GAZPROM")
                .setNumber(12)
                .build();

        gasStationDAO.updateStation(updatedGasStation,id);

        GasStationBuilder gasStationFromDB = gasStationDAO.getStationById(id);

        assertNotEquals(gasStation.getName(),gasStationFromDB.getName(),"Name should different");
        assertNotEquals(gasStation.getNumber(),gasStationFromDB.getNumber(),"Station Number should different");
    }
}
