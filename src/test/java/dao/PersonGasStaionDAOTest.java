package dao;

import entity.GasStationBuilder;
import entity.PersonBuilder;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.testcontainers.containers.PostgreSQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
@Testcontainers
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class PersonGasStaionDAOTest {
    @Container
    private static PostgreSQLContainer<?> postgreSQLContainer =
            new PostgreSQLContainer<>("postgres:latest")
                    .withDatabaseName("test")
                    .withUsername("test")
                    .withPassword("test");

    private Connection connection;
    private GasStationDAO gasStationDAO;
    private PersonDao personDAO;
    private PersonGasStationDAO personGasStationDAO;

    @BeforeAll
    public void beforeAll() {
        postgreSQLContainer.start();
    }

    @BeforeEach
    public void setUp() throws SQLException, IOException {
        String jdbcUrl = postgreSQLContainer.getJdbcUrl();
        String username = postgreSQLContainer.getUsername();
        String password = postgreSQLContainer.getPassword();

        try {
            connection= DriverManager.getConnection(jdbcUrl, username, password);
            Statement statement = connection.createStatement();

            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person (id int primary key not null generated by default as identity, name varchar(100) not null, age int check (age > 9 and age <90));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS car (id int primary key generated by default as identity not null, person_id int not null references person(id),model varchar(100) not null, horse_power int not null check (horse_power >60 and horse_power <800));");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS gas_station (id int primary key not null generated by default as identity, name varchar(100) not null, number int not null);");
            statement.executeUpdate("CREATE TABLE IF NOT EXISTS person_gas_station (person_id INTEGER NOT NULL REFERENCES person(id), gas_station_id INTEGER NOT NULL REFERENCES gas_station(id), PRIMARY KEY (person_id, gas_station_id));");

        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
        gasStationDAO = new GasStationDAO(connection);
        personDAO = new PersonDao(connection);
        personGasStationDAO = new PersonGasStationDAO(connection);
    }

    @AfterEach
    public void tearDown() throws SQLException {
        connection.close();
    }

    @AfterAll
    static void tearDownContainer() throws SQLException {
        postgreSQLContainer.stop();
    }

    @Test
    void testAddPersonGasStation() throws SQLException, IOException {


        GasStationBuilder gasStation = new GasStationBuilder.Builder()
                .setNumber(13)
                .setName("TATNEFT")
                .build();

        PersonBuilder person = new PersonBuilder.Builder()
                .setName("Jasper")
                .setAge(33)
                .build();

        int personId = personDAO.addPerson(person);
        int gasStationId = gasStationDAO.addStation(gasStation);

        int personGasStationid = personGasStationDAO.insertPersonGasStation(personId, gasStationId);
        assertEquals(1, personGasStationid);
    }

    @Test
    void testDeletePersonGasStation() throws SQLException, IOException {
        GasStationBuilder gasStation = new GasStationBuilder.Builder()
                .setNumber(13)
                .setName("TATNEFT")
                .build();

        PersonBuilder person = new PersonBuilder.Builder()
                .setName("Jasper")
                .setAge(33)
                .build();

        int personId = personDAO.addPerson(person);
        int gasStationId = gasStationDAO.addStation(gasStation);

        personGasStationDAO.insertPersonGasStation(personId, gasStationId);
        int deletedRes = personGasStationDAO.deletePersonGasStation(personId, gasStationId);

        assertEquals(1, deletedRes);
    }
}
